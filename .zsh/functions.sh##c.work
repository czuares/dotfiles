#!/usr/bin/env bash

# shellcheck source=k8scontext.zsh
source ~/.zsh/k8scontext.zsh

source <(kubectl completion zsh)

export PACKAGECLOUD_TOKEN=$(<~/private/keys/token/packagecloud-token)
export HOMEBREW_GITHUB_API_TOKEN=$(<~/private/keys/token/homebrew-token)
export OKTA_TOKEN=$(<~/private/keys/token/okta)

export PATH="$PATH:$HOME/private/scripts"

make-venv-here() {
  local dir name
  dir="$(pwd)"
  name="$(basename "$dir")"
  mkvirtualenv -a "$dir" "$name"
}

make-venv() {
  local name=${1?Project name is required}
  mkvirtualenv -p python3.6 -a ~/proj/$project $project
}

ssh-circleci() {
  : ${1?Expected parameters <port> <host>}
  ssh -o "UserKnownHostsFile /dev/null" \
    -o "StrictHostKeyChecking no" \
    -o "LogLevel ERROR" -p "$@"
  }

kpod() {
  local name="${1?Expected release name}"

  kubectl get pod \
    -l release="$name" \
    --no-headers \
    -o custom-columns=:metadata.name | head -n 1
  }

kexec() {
  local name="${1?Expected app name}"
  : "${2?Expected command}"
  kubectl exec -it "$(kpod "$name")" "${@:2}"
}

kenter() {
  local name cmd=("bash")
  if [[ $# -eq 0 ]]; then
    name=$(mypaste) # provided script
    if [[ -n "$name" ]]; then
      >&2 echo "Clipboard is not empty"
    else
      >&2 echo "Expected pod name as argument or clipboard but found neither"
      return 2
    fi
  else
    >&2 echo "Arguments provided"
    if [[ $# -eq 1 ]]; then
      name="$1"
    fi
    if [[ $# -gt 1 ]]; then
      cmd=("${@:2}")
    fi
  fi
  if [[ "$name" =~ -[0-9a-z]{4} ]]; then
    >&2 echo "Found valid pod name: $name"
  else
    >&2 echo "Did not find valid pod name"
    return 2
  fi
  kubectl exec -it "$name" "${cmd[*]}"
}

klog () {
  local name="${1?Expected app name}"
  kubectl logs -f "$(kpod "$name")"
}

kwatch() {
  watch -n "${2:-5}" "kubectl get $1"
}

kgetpodsbyhost() {
  local name
  if [[ $# -eq 0 ]]; then
    name=$(mypaste) # provided script
    if [[ -n "$name" ]]; then
      >&2 echo "Getting pods for $name"
    else
      >&2 echo "Expected hostname"
      return 2
    fi
  else
    name="${1?Expected hostname}"
  fi

  kubectl get po --all-namespaces \
    --field-selector=spec.nodeName="${name}"
}

k-dump-running-pods-host() {
  kubectl get pod \
    -o=custom-columns=NAME:.metadata.name,NODE:.spec.nodeName,NS:.metadata.namespace \
    --field-selector=status.phase=Running \
    --all-namespaces
}

kdebug() {
  kubectl run --generator=run-pod/v1 \
    -it --rm --image=nicolaka/netshoot \
    debug bash
}

awsv2() {
  # docker pull amazon/aws-cli:latest &>/dev/null
  docker run --rm -it -v ~/.aws:/root/.aws \
    -e AWS_PROFILE="$AWS_PROFILE" \
    -v $(pwd):/aws amazon/aws-cli -- $@
}

ksuspendcron() {
  local name="${1?CronJob name expected}"
  kubectl patch cronjobs "$name" -p "{\"spec\" : {\"suspend\" : true }}"
}

kresumecron() {
  local name="${1?CronJob name expected}"
  kubectl patch cronjobs "$name" -p "{\"spec\" : {\"suspend\" : false }}"
}
