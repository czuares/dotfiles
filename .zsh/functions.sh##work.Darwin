#!/usr/bin/env bash

source virtualenvwrapper.sh
source ~/.zsh/k8scontext.zsh

# source <(kubectl completion zsh)
# source ~/.nix-profile/etc/profile.d/nix.sh

# source <(stern --completion=zsh)
# source ~/.local/bin/aws_zsh_completer.sh
# eval "$(pyenv init -)"

# Source custom files
for f in ~/private/scripts/source/*
do
  source "$f"
done

# Work aliases
alias ka="k8s-auth"

export PACKAGECLOUD_TOKEN=$(<~/.packagecloud-token)
export HOMEBREW_GITHUB_API_TOKEN=$(<~/.homebrew-token)

# Setup GPG
# GPG_TTY=$(tty)
# export GPG_TTY
# if ! gpg-connect-agent /bye || [ -z "$GPG_AGENT_INFO" ]; then
#     eval "$(gpg-agent --daemon)"
#     GPG_AGENT_INFO="$HOME/.gnupg/S.gpg-agent:$(pgrep gpg-agent):1"
#     export GPG_AGENT_INFO
# fi
# if [ -z "$SSH_AUTH_SOCK" ]; then
#     SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
#     export SSH_AUTH_SOCK
# fi
if ! gpg-connect-agent /bye; then
  gpgconf --launch gpg-agent
fi
export GPG_TTY=$(tty)
export GPG_AGENT_INFO="~/.gnupg/S.gpg-agent:$(pgrep gpg-agent):1"
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
# eval $(keychain --eval --quiet --agents gpg,ssh id_rsa 0x97756AE7B8A4FDA9)

# Source chtf
if [[ -f /usr/local/share/chtf/chtf.sh ]]; then
  source "/usr/local/share/chtf/chtf.sh"
  chtf 0.11.14
fi

make-venv() {
  : ${1?Project name is required}
  mkvirtualenv -p python3.6 -a ~/proj/$1 $1
}

ssh-circleci() {
  : ${1?Expected parameters <port> <host>}
  ssh -o "UserKnownHostsFile /dev/null" \
    -o "StrictHostKeyChecking no" \
    -o "LogLevel ERROR" -p "$@"
  }

dedupe-history() {
  cp ~/.zsh_history{,-old}
  tmpFile=$(mktemp)
  awk -F ";" '!seen[$2]++' ~/.zsh_history > $tmpFile
  # echo $tmpFile
  mv $tmpFile ~/.zsh_history
}

git-set-upstream() {
  local branch="$(git rev-parse --abbrev-ref HEAD)"
  echo "Current branch $branch"
  git branch --set-upstream-to=origin/$branch $branch
}

gtop(){
  cd "$(git rev-parse --show-toplevel)" || true 
}

okta-pass() {
  lpass show -cp okta.com
}

kpod() {
  : "${1?Expected app name}"
  local name="$1"

  kubectl get pod \
    -l app="$name" \
    --no-headers \
    -o custom-columns=:metadata.name | head -n 1
  }

kexec() {
  : "${1?Expected app name}"
  : "${2?Expected command}"
  local name="$1"

  kubectl exec -it "$(kpod "$name")" "${@:2}"
}

klog () {
  : "${1?Expected app name}"
  local name="$1"

  kubectl logs -f "$(kpod "$name")"
}

kwatch() {
  watch -n "${2:-5}" "kubectl get $1"
}

kgetpodsbyhost() {
  : "${1?Expected host name}"

  kubectl get po --all-namespaces \
    --field-selector=spec.nodeName="${1}"
}

k-dump-running-pods-host() {
  kubectl get pod \
    -o=custom-columns=NAME:.metadata.name,NODE:.spec.nodeName,NS:.metadata.namespace \
    --field-selector=status.phase=Running \
    --all-namespaces
}
