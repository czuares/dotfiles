#!/usr/bin/env bash

# Source custom files
. ~/.aws_aliases

okta-token() { 
    oathtool --totp -b "$(<~/.oath-okta)" | pbcopy
}

# Setup GPG
export GPG_AGENT_INFO="~/.gnupg/S.gpg-agent:$(pgrep gpg-agent):1"
eval $(keychain --eval --quiet --agents gpg,ssh id_rsa 0x97756AE7B8A4FDA9)

# Source chtf
if [[ -f /usr/local/share/chtf/chtf.sh ]]; then
    source "/usr/local/share/chtf/chtf.sh"
    chtf 0.11.7
fi

function make-venv() {
    : ${1?Project name is required}
    mkvirtualenv -p python3.6 -a ~/proj/$1 $1
}

function update-salt-users-state() {
    if [[ ${VIRTUAL_ENV##*/} != "sysalt" ]]; then
        echo "Not in sysalt venv"
        return 1
    fi
    : ${1?Target is required}
    salt-ssh -i $1 state.sls syapse-users "${@:2}"
}

function ssh-opkins-agent() {
    : ${1?Expected parameters <host>}
    ssh -o "UserKnownHostsFile /dev/null" \
        -o "StrictHostKeyChecking no" \
        -o "LogLevel ERROR" "syops@$1"
}

function ssh-circleci() {
    : ${1?Expected parameters <port> <host>}
    ssh -o "UserKnownHostsFile /dev/null" \
        -o "StrictHostKeyChecking no" \
        -o "LogLevel ERROR" -p "$@"
}

function dedupe-history() {
    cp ~/.zsh_history{,-old}
    tmpFile=$(mktemp)
    awk -F ";" '!seen[$2]++' ~/.zsh_history > $tmpFile
    # echo $tmpFile
    mv $tmpFile ~/.zsh_history
}

function git-set-upstream() {
    local branch="$(git rev-parse --abbrev-ref HEAD)"
    echo "Current branch $branch"
    git branch --set-upstream-to=origin/$branch $branch
}

function okta-pass() {
    lpass show -cp okta.com
}

function gh() {
    local repo
    if [[ $# -eq 1 ]]; then
        repo="$1"
    else
        local dir
        dir=$(git rev-parse --show-toplevel)
        repo="${dir##*/}"
    fi
    open "https://github.com/syapse/$repo"
}

function create-ssh-user() {
    : "${1?Path to key expected}"
    : "${2?Username expected}"

    local key
    local user
    local keypath
    key="$1"
    user="$2"
    keypath="$HOME/proj/sysalt/salt/states/syapse-users/keys/$user.id_rsa.pub"

    if [[ ! -e "$key" ]]; then
        echo "Path to $key is invalid!"
        return 1
    elif [[ -e "$keypath" ]]; then
        echo "Key already exists at $keypath"
        return 1
    fi

    mv "$key" "$keypath"

    if [[ ${VIRTUAL_ENV##*/} != "sysalt" ]]; then
        workon sysalt
    fi
    ./scripts/add-user-to-bastion.sh "$user"
    # salt-ssh saws1-uw1c-prod-cs state.sls syapse-saws
}

function kpod() {
    : "${1?Expected app name}"
    local name="$1"

    kubectl get pod \
        -l app="$name" \
        --no-headers \
        -o custom-columns=:metadata.name | head -n 1
}

function kexec() {
    : "${1?Expected app name}"
    : "${2?Expected command}"
    local name="$1"

    kubectl exec -it "$(kpod "$name")" "${@:2}"
}

function klog () {
    : "${1?Expected app name}"
    local name="$1"

    kubectl logs -f "$(kpod "$name")"
}
